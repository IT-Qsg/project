1.树的实现方式：【广义表的实现，二叉树的实现】
    https://blog.csdn.net/kong_xz/article/details/79484843
    广义表的定义
    广义表简称表，它是线性表的推广。一个广义表是n（n≥0）个元素的一个序列，若n=0时则称为空表。
    设ai为广义表的第i个元素,则广义表GL的一般表示与线性表相同：
     GL=(a1,a2,…,ai,…,an)
    其中n表示广义表的长度，即广义表中所含元素的个数，n≥0。如果ai是单个数据元素，则ai是广义表GL的原子；如果ai是一个广义表，则ai是广义表GL的子表。 

    广义表具有如下重要的特性：
    （1）广义表中的数据元素有相对次序；
    （2）广义表的长度定义为最外层包含元素个数；
    （3）广义表的深度定义为所含括弧的重数。其中原子的深度为0，空表的深度为1；
    （4）广义表可以共享；一个广义表可以为其他广义表共享；这种共享广义表称为再入表；
    （5）广义表可以是一个递归的表。一个广义表可以是自已的子表。这种广义表称为递归表。递归表的深度是无穷值,长度是有限值；
    （6）任何一个非空广义表GL均可分解为表头head(GL) = a1和表尾tail(GL) = ( a2,…,an) 两部分

2.树是一种递归结构，表示方式：孩子表示法，孩子兄弟表示法

3.为什么需要树【抽象数据类型(ADT)】
      1.数组的数据结构，我们知道对于有序数组，查找很快，并介绍可以通过二分法查找，但是想要在有序数组中插入一个数据项，
   就必须先找到插入数据项的位置，然后将所有插入位置后面的数据项全部向后移动一位，来给新数据腾出空间，平均来讲要移动N/2次，
   这是很费时的。同理，删除数据也是。
　　  2.链表，链表的插入和删除很快，我们只需要改变一些引用值就行了，但是查找数据却很慢了，因为不管我们查找什么数据，
   都需要从链表的第一个数据项开始，遍历到找到所需数据项为止，这个查找也是平均需要比较N/2次。
   所以：
　　 那么我们就希望一种数据结构能同时具备数组查找快的优点以及链表插入和删除快的优点，于是 树 诞生了。
4.树的基本概念
    ①、路径：顺着节点的边从一个节点走到另一个节点，所经过的节点的顺序排列就称为“路径”。
　　②、根：树顶端的节点称为根。一棵树只有一个根，如果要把一个节点和边的集合称为树，
        那么从根到其他任何一个节点都必须有且只有一条路径
　　③、父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点
　　④、子节点：一个节点含有的子树的根节点称为该节点的子节点
　　⑤、兄弟节点：具有相同父节点的节点互称为兄弟节点
　　⑥、叶节点：没有子节点的节点称为叶节点，也叫叶子节点
　　⑦、子树：每个节点都可以作为子树的根，它和它所有的子节点、子节点的子节点等都包含在子树中。
　　⑧、节点的层次：从根开始定义，根为第一层，根的子节点为第二层，以此类推。
　　⑨、深度：对于任意节点n,n的深度为从根到n的唯一路径长，根的深度为0；
　　⑩、高度：对于任意节点n,n的高度为从n到一片树叶的最长路径长，所有树叶的高度为0
     …… 双亲
5.二叉树：树的每个节点最多只能有两个子节点
       1.二叉搜索树要求：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，
    则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。
